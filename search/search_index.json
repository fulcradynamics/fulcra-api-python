{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>fulcra-api</code>: A Fulcra API client library for Python","text":"<p>The fulcra-api library is currently compatible with Python 3.9 and up.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#installing-in-your-project","title":"Installing in your project","text":"<p>First, install the <code>fulcra-api</code> module in your project.</p> <p>If you're using Poetry, use:</p> <pre><code>poetry add fulcra-api\n</code></pre> <p>If you're using pip, use:</p> <pre><code>pip install fulcra-api\n</code></pre>"},{"location":"#installing-in-a-jupyter-notebook","title":"Installing in a Jupyter notebook","text":"<p>In a Python cell in your notebook, use:</p> <pre><code>%pip install fulcra-api\n</code></pre> <p>Colaboratory note: You may see a dependency error while installing pyarrow; this can be ignored.</p>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#logging-in","title":"Logging In","text":"<p>Most Fulcra API requests are authenticated with a token, which must be passed along  with each request.  The Fulcra API uses Auth0's  Device Authorization Flow to authorize the code running and get a token.</p> <p>This library simplifies this flow for you; to log in, create an instance of the <code>FulcraAPI</code> class and call <code>authorize</code> on it:</p> <pre><code>from fulcra_api.core import FulcraAPI\nfulcra = FulcraAPI()\nfulcra.authorize()\n</code></pre> <p>As part of this flow, you'll be asked to visit a webpage to authenticate to Fulcra. The URL of this page will be included in the output; the library will also attempt to open a new tab to the URL automatically.</p> <p>As a user, just click \"Confirm\" once you've logged in; once this succeeds, close the tab.</p> <p>When this succeeds, the call to <code>authorize()</code> will return, and the <code>fulcra</code> object will now make calls.  It will take care of refreshing the token and including it with API calls.</p>"},{"location":"#making-api-calls","title":"Making API Calls","text":"<p>Once you've called <code>authorize</code> once, any of the calls in the FulcraAPI class will work.  Here's an example that will retrieve the calendars from your data store:</p> <pre><code>calendars = fulcra.calendars()\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>You can find some demo notebooks in the Fulcra demos repository.</p>"},{"location":"#bugs-feature-requests","title":"Bugs / Feature Requests","text":"<p>Feel free to report any bugs or feature requests using GitHub issues.</p>"},{"location":"fulcraapi/","title":"The FulcraAPI class","text":"<p>The main class for making Fulcra API functions.</p> <p>This contains functions for authorizing a token, authenticating HTTP requests, making calls, and loading data.</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.__init__","title":"<code>__init__(oidc_domain=None, oidc_client_id=None, oidc_scope=None, oidc_audience=None, access_token=None, access_token_expiration=None, refresh_token=None)</code>","text":"<p>Initializes the FulcraAPI client.</p> <p>Parameters:</p> Name Type Description Default <code>oidc_domain</code> <code>Optional[str]</code> <p>Optional. The OIDC provider domain to use for authentication.          Defaults to FULCRA_OIDC_DOMAIN.</p> <code>None</code> <code>oidc_client_id</code> <code>Optional[str]</code> <p>Optional. The OIDC client ID to use.             Defaults to FULCRA_OIDC_CLIENT_ID.</p> <code>None</code> <code>oidc_scope</code> <code>Optional[str]</code> <p>Optional. The OAuth scopes to request.         Defaults to FULCRA_OIDC_SCOPE.</p> <code>None</code> <code>oidc_audience</code> <code>Optional[str]</code> <p>Optional. The OIDC audience for the token.            Defaults to FULCRA_OIDC_AUDIENCE.</p> <code>None</code> <code>access_token</code> <code>Optional[str]</code> <p>Optional. An existing access token to use.</p> <code>None</code> <code>access_token_expiration</code> <code>Optional[datetime]</code> <p>Optional. The expiration datetime for the                      provided access_token.</p> <code>None</code> <code>refresh_token</code> <code>Optional[str]</code> <p>Optional. An existing refresh token to use.</p> <code>None</code>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.apple_location_updates","title":"<code>apple_location_updates(start_time, end_time, fulcra_userid=None)</code>","text":"<p>Retrieve the raw Apple location update samples during the specified period of time.</p> <p>Requires an authorized access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Union[str, datetime]</code> <p>The start of the time range (inclusive), as an ISO 8601 string or <code>datetime</code> object.</p> required <code>end_time</code> <code>Union[str, datetime]</code> <p>The end of the range (exclusive), as an ISO 8601 string or <code>datetime</code> object.</p> required <code>fulcra_userid</code> <code>Optional[str]</code> <p>When present, specifies the Fulcra user ID to request data for.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of dicts, each of which contains the data from a location update.</p> <p>Examples:</p> <p>To retrieve all location updates within a specific hour:</p> <pre><code>&gt;&gt;&gt; updates = fulcra.apple_location_updates(\n...     start_time=\"2023-09-24T20:00:00Z\",\n...     end_time=\"2023-09-24T21:10:00Z\"\n... )\n</code></pre> <p>To see the details of the first update:</p> <pre><code>&gt;&gt;&gt; updates[0]\n{'speed': -1, 'horizontal_accuracy_meters': 35, 'longitude_degrees':\n-117.15661336566698, 'source_is_simulated_by_software': False,\n'source_is_produced_by_accessory': False, 'latitude_degrees':\n32.706505158026005, 'vertical_accuracy_meters': 3.0130748748779297,\n'course_heading_accuracy_degrees': -1, 'course_heading_degrees': -1,\n'ellipsoidal_altitude_meters': -6.280021667480469, 'floor': 0,\n'speed_accuracy_meters': -1, 'altitude_meters': 29.17388153076172, 'uuid':\n'e80feacc-54e9-414f-86cb-8d6ebd85ea41', 'timestamp':\n'2023-09-24T20:39:28.056+00:00'}\n</code></pre>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.apple_location_visits","title":"<code>apple_location_visits(start_time, end_time, fulcra_userid=None)</code>","text":"<p>Retrieve the raw Apple location visit samples during the specified period of time.</p> <p>Requires an authorized access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Union[str, datetime]</code> <p>The start of the time range (inclusive), as an ISO 8601 string or <code>datetime</code> object.</p> required <code>end_time</code> <code>Union[str, datetime]</code> <p>The end of the range (exclusive), as an ISO 8601 string or <code>datetime</code> object.</p> required <code>fulcra_userid</code> <code>Optional[str]</code> <p>When present, specifies the Fulcra user ID to request data for.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of dicts, each of which contains the data from a location visit.</p> <p>Examples:</p> <p>To retrieve all location updates within a specific hour:</p> <pre><code>&gt;&gt;&gt; visits = fulcra.apple_location_visits(\n...     start_time=\"2023-09-24T20:00:00Z\",\n...     end_time=\"2023-09-24T21:10:00Z\"\n... )\n</code></pre> <p>To see the details of the first update:</p> <pre><code>&gt;&gt;&gt; visits[0]\n{'longitude_degrees': -117.1224047932943, 'latitude_degrees':\n32.75812770726706, 'arrival_date': '0001-01-01T00:00:00+00:00',\n'departure_date': '2023-09-25T01:42:16.998+00:00',\n'horizontal_accuracy_meters': 32.93262639589646, 'uuid':\n    '935971dd-0822-49ef-a74f-b09a24d68c3a'}\n</code></pre>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.apple_workouts","title":"<code>apple_workouts(start_time, end_time, fulcra_userid=None)</code>","text":"<p>Retrieve the list of Apple workouts that occurred (at least partially) during the specified time range.</p> <p>Requires an authorized access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Union[str, datetime]</code> <p>The start of the time range (inclusive), as an ISO 8601 string or <code>datetime</code> object.</p> required <code>end_time</code> <code>Union[str, datetime]</code> <p>The end of the range (exclusive), as an ISO 8601 string or <code>datetime</code> object.</p> required <code>fulcra_userid</code> <code>Optional[str]</code> <p>When present, specifies the Fulcra user ID to request data for.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of dicts, each of which contains the data from a workout.</p> <p>Examples:</p> <p>To retrieve all workouts during a time period:</p> <pre><code>&gt;&gt;&gt; workouts = fulcra.apple_workouts(\n...     start_time = \"2023-09-21 07:00:00.000Z\",\n...     end_time = \"2023-09-22 07:00:00.000Z\"\n... )\n</code></pre> <p>To inspect the details of a workout:</p> <pre><code>&gt;&gt;&gt; workouts[0]\n{'start_date': '2023-09-21T19:18:31.733000Z', 'end_date':\n'2023-09-21T19:49:08.773000Z', 'has_undetermined_duration': False,\n'apple_workout_id': '480b25fe-b229-41b9-bf13-7ccf5e2092ec', 'duration':\n1837.0397539138794, 'extras': {'HKTimeZone': 'America/Los_Angeles',\n'HKAverageMETs': '4.37848 kcal/hr\u00b7kg' ... }\n</code></pre>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.authorize","title":"<code>authorize()</code>","text":"<p>Request a device token, then prompt the user to authorize it.</p> <p>This uses the Device Authorization workflow, which requires the user to visit a link and confirm that the code shown on the screen matches.</p> <p>This function will attempt to open the link in a new browwser tab (using <code>webbrowser</code> module); it will also be either <code>print()</code>ed out (or <code>display()</code>ed out if run inside Jupyter).</p> <p>The function will wait until the user visits the page and authentiactes, or until a specified time has passed.</p> <p>Raises an exception on failure.</p> <p>Examples:</p> <p>fulcra.authorize() Use your browser to log in to Fulcra.  If the tab does not open automatically, visit this URL to authenticate: https://fulcra.us.auth0.com/activate?user_code=SJZC-GRBW</p> <p>When the authorization succeeds, the following will be displayed:</p> <pre><code>Authorization succeeded.\n</code></pre>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.authorize_with_authorization_code","title":"<code>authorize_with_authorization_code(code, redirect_uri)</code>","text":"<p>Exchanges an authorization code for an access token, refresh token, and ID token.</p> <p>This method should be called after the user has been redirected back to your application's <code>redirect_uri</code> with an authorization <code>code</code>.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The authorization code received from Auth0.</p> required <code>redirect_uri</code> <code>str</code> <p>The same <code>redirect_uri</code> that was used when requesting           the authorization code.</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>If the token exchange fails.</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.boolean_annotations","title":"<code>boolean_annotations(start_time, end_time, source=None, fulcra_userid=None)</code>","text":"<p>Retrieves recorded Boolean Annotations, along with any metadata, for the requested time ranges.</p> <p>Requires a valid access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Union[str, datetime]</code> <p>The start of the time range (inclusive), as an ISO 8601 string or <code>datetime</code> object</p> required <code>end_time</code> <code>Union[str, datetime]</code> <p>The end of the range (exclusive), as an ISO 8601 string or <code>datetime</code> object</p> required <code>source</code> <code>Optional[str]</code> <p>When specified, the full identifier of the source to query records from</p> <code>None</code> <code>fulcra_userid</code> <code>Optional[str]</code> <p>When present, specifies the Fulcra user ID to request data for</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of recorded annotations; each annotation is represented by a dict.</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.calendar_events","title":"<code>calendar_events(start_time, end_time, calendar_ids=None, fulcra_userid=None)</code>","text":"<p>Retrieve the list of calendar events that occur (at least partially) during the specified time range.</p> <p>To request events from another user's store, pass their user ID as the <code>fulcra_userid</code> parameter.</p> <p>Requires an authorized access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Union[str, datetime]</code> <p>The start of the time range (inclusive), as an ISO 8601 string or <code>datetime</code> object.</p> required <code>end_time</code> <code>Union[str, datetime]</code> <p>The end of the range (exclusive), as an ISO 8601 string or <code>datetime</code> object.</p> required <code>calendar_ids</code> <code>Optional[List[str]]</code> <p>If included, the query results are limited to events that are on the specified calendars.</p> <code>None</code> <code>fulcra_userid</code> <code>Optional[str]</code> <p>When present, specifies the Fulcra user ID to request data for.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of dicts, each of which contains the data from a calendar event.</p> <p>Examples:</p> <p>To retrieve all calendar events that span a given range of time:</p> <pre><code>&gt;&gt;&gt; cal_events = fulcra.calendar_events(\n...     start_time = \"2023-09-24 07:00:00.000Z\",\n...     end_time = \"2023-09-25 07:00:00.000Z\",\n...     calendar_ids=[\"01fb4138-db27-4792-867d-5cfbdc720165\"]\n... )\n</code></pre> <p>To inspect the details of an event:</p> <pre><code>&gt;&gt;&gt; cal_events[0]\n{'calendar_event_id': 'c409a249-24cd-4c19-b763-3683cc21b9f8',\n'calendar_id': '01fb4138-db27-4792-867d-5cfbdc720165', 'start_date':\n'2023-09-24T20:10:00Z', 'end_date': '2023-09-24T21:10:00Z',\n'allow_new_time_proposals': None, 'alarms':\n['19b7692e-7434-44be-a5ba-c8dfa338deb6'], 'availability': 'free',\n'calendar_item_external_identifier':\n'7kukuqrfedlm2f9tfbe684r6cqpk9mrk0aqdeoan7jdbr93e7963lagn9uq6pdsbac40',\n'calendar_item_identifier': '22153B27-4BEE-480C-9627-F2EABC698103',\n'event_identifier':\n'EC9D6240-04A7-4869-9D2E-1A7648EA7732:7kukuqrfedlm2f9tfbe684r6cqpk9mrk0aqdeoan7jdbr93e7963lagn9uq6pdsbac40',\n'creation_date': '2023-09-16T23:27:22Z', 'has_alarms': True,\n'has_attendees': True, 'has_notes': True, 'has_recurrence_rules':\nFalse, 'is_all_day': False, 'is_detached': False, 'last_modified_date':\n'2023-09-16T23:27:26Z', 'location': 'PETCO Park', 'notes':\n'This event was created from an email you received in Gmail.',\n'occurrence_date': '2023-09-24T20:10:00Z', 'organizer':\n'22381502-0af3-487a-820c-e22aa4cae201', 'recurrence_rules': None,\n'status': 'confirmed', 'geolocation': None, 'time_zone':\n'America/Los_Angeles (fixed)', 'title':\n'St. Louis Cardinals at San Diego Padres', 'url': None,\n'extras': {}, 'participants': [{'is_current_user': True,\n'participant_role': 'required', 'participant_type': 'person',\n'participant_status': 'accepted', 'url': 'mailto:cstone@gmail.com',\n'contact_id': '00900185-b290-4f1c-860d-e4433024a943',\n'name': 'cstone@gmail.com'}]}\n</code></pre>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.calendars","title":"<code>calendars(fulcra_userid=None)</code>","text":"<p>Retrieve the list of calendars available in your data store.</p> <p>To request the calendars from another user's store, pass their user ID as the <code>fulcra_userid</code> parameter.</p> <p>Requires an authorized access token.</p> <p>Parameters:</p> Name Type Description Default <code>fulcra_userid</code> <code>Optional[str]</code> <p>When present, specifies the Fulcra user ID to request data for.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of dicts, each of which represents a calendar.</p> <p>Examples:</p> <p>To retrieve all calendars from your data store:</p> <pre><code>&gt;&gt;&gt; calendars = fulcra.calendars()\n&gt;&gt;&gt;\n</code></pre> <p>To inspect the details of a calendar:</p> <pre><code>&gt;&gt;&gt; calendars[0]\n{'calendar_id': '02b761da-46d0-4074-a9c8-406fd0de3adf', 'calendar_name':\n'Birthdays', 'calendar_color':\n'[0.5098039507865906,0.5843137502670288,0.686274528503418,1.0]',\n'calendar_source_id': '03da9f61-7b58-4021-8f40-a93548258faf',\n'calendar_source_name': 'Other', 'fulcra_source': 'apple_calendar'}\n</code></pre>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.duration_annotations","title":"<code>duration_annotations(start_time, end_time, source=None, fulcra_userid=None)</code>","text":"<p>Retrieves recorded Duration Annotations, along with any metadata, for the requested time ranges.</p> <p>Requires a valid access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Union[str, datetime]</code> <p>The start of the time range (inclusive), as an ISO 8601 string or <code>datetime</code> object</p> required <code>end_time</code> <code>Union[str, datetime]</code> <p>The end of the range (exclusive), as an ISO 8601 string or <code>datetime</code> object</p> required <code>source</code> <code>Optional[str]</code> <p>When specified, the full identifier of the source to query records from</p> <code>None</code> <code>fulcra_userid</code> <code>Optional[str]</code> <p>When present, specifies the Fulcra user ID to request data for</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of recorded annotations; each annotation is represented by a dict.</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.fulcra_api","title":"<code>fulcra_api(access_token, url_path)</code>","text":"<p>Make a call to the given url path (e.g. <code>/v0/data/time_series_grouped?...</code>) with the specified access token.</p> <p>Parameters:</p> Name Type Description Default <code>access_token</code> <code>str</code> <p>The access token to authenticate the request with</p> required <code>url_path</code> <code>str</code> <p>The path of the URL to use (e.g. <code>\"/v0/data/...\"</code>)</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The raw response data (as bytes).  Raises an exception on failure.</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.fulcra_v1_api","title":"<code>fulcra_v1_api(access_token, data_class, data_type, params={})</code>","text":"<p>Make a call to the v1 API.</p> <p>Parameters:</p> Name Type Description Default <code>access_token</code> <code>str</code> <p>The access token to authenticate the request with</p> required <code>data_class</code> <code>str</code> <p>The class of data to query (event or metric)</p> required <code>data_type</code> <code>str</code> <p>The data type to query</p> required <code>params</code> <code>dict</code> <p>Additional params to add to the query</p> <code>{}</code> <p>Returns:</p> Type Description <code>bytes</code> <p>The raw response data (as bytes).  Raises an exception on failure.</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.get_authorization_code_url","title":"<code>get_authorization_code_url(redirect_uri, state=None)</code>","text":"<p>Generates the URL to redirect the user to for the Authorization Code Grant flow.</p> <p>The calling application (e.g., a web service) should redirect the user to this URL. After the user authenticates and authorizes the application, Auth0 will redirect the user back to the specified <code>redirect_uri</code> with an authorization <code>code</code> (and <code>state</code> if provided) in the query parameters.</p> <p>Parameters:</p> Name Type Description Default <code>redirect_uri</code> <code>str</code> <p>The URL where the user will be redirected after authorization.           This must be registered in your Auth0 application settings.</p> required <code>state</code> <code>Optional[str]</code> <p>An opaque value used to maintain state between the request and    the callback. It's also used to prevent CSRF attacks.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The authorization URL.</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.get_fulcra_userid","title":"<code>get_fulcra_userid()</code>","text":"<p>Retrieve the currently authorized Fulcra UserID.</p> <p>Returns:</p> Type Description <code>str</code> <p>the Fulcra UserID of the currently-authorized user.</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.get_shared_datasets","title":"<code>get_shared_datasets()</code>","text":"<p>Retrieves datasets that have been shared with the currently authenticated user</p> <p>Examples:</p> <pre><code>    &gt;&gt;&gt; datasets = fulcra_client.get_shared_datasets()\n    &gt;&gt;&gt; datasets[0]\n    {'permission_id': 'cf362f80-ef41-4c08-b5e3-b18bd3d1524b', 'created_at': '2024-08-21T17:52:10.658596Z', 'time_start': None, 'time_end': None, 'fulcra_userid': 'a24a9667-c2c6-4bbf-9a0f-4Bej0afcb521', 'fulcra_user_name': 'John Doe', 'fulcra_user_picture': 'https://lh3.googleusercontent.com/a/ACg8ocL-ggGYjOFq23Dfbf5GohDXbk01AoGmL0gCSbooVBXDgWeTLJk=s47-d', 'datashare_name': 'Provisioned for data analysis'}\n</code></pre>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.get_token","title":"<code>get_token(device_code)</code>","text":"<p>Polls for an access token using a device code. Used by the device authorization flow.</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.get_user_info","title":"<code>get_user_info()</code>","text":"<p>Return information about the authenticated Fulcra User.</p> <p>Returns information about the authenticated Fulcra User, including their preferences such as time zone, calendar ids, etc.</p> <p>Returns:</p> Type Description <code>Dict</code> <p>A dict containing user information.</p> <p>Examples:</p> <pre><code>    &gt;&gt;&gt; user_info = fulcra_client.get_user_info()\n    &gt;&gt;&gt; user_info\n    {'userid': 'a24a9667-c2c6-4bbf-9a0f-4Bej0afcb521', 'created': '2024-08-20T19:51:09.123456Z', 'preferences': {'timezone': 'America/Los_Angeles'}}\n</code></pre>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.gmaps_location_updates","title":"<code>gmaps_location_updates(start_time, end_time, fulcra_source_id=None, fulcra_userid=None)</code>","text":"<p>Return Google Maps geo-location update samples for a user.</p> <p>Retrieve the raw Google Maps location update samples for the specified user during the specified period of time.</p> <p>Requires an authorized access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Union[str, datetime]</code> <p>The starting timestamp in ISO 8601 format (inclusive).</p> required <code>end_time</code> <code>Union[str, datetime]</code> <p>The ending timestamp in ISO 8601 format (exclusive).</p> required <code>fulcra_source_id</code> <code>Optional[str]</code> <p>Optional. When present, specifies the Fulcra source ID to filter results.</p> <code>None</code> <code>fulcra_userid</code> <code>Optional[str]</code> <p>Optional. When present, specifies the Fulcra user ID to request data for.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of dicts, each of which contains the data from a Google Maps location update.</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.location_at_time","title":"<code>location_at_time(time, window_size=14400, include_after=False, reverse_geocode=False, fulcra_userid=None)</code>","text":"<p>Gets the user's location at the specified time.  If no sample is available for the exact time, searches for the closest sample up to <code>window_size</code> seconds back.  If <code>include_after</code> is true, then also searches <code>window_size</code> seconds forward.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>Union[str, datetime]</code> <p>The point in time to get the user's location for.</p> required <code>window_size</code> <code>int</code> <p>The size (in seconds) to look back (and optionally forward) for samples</p> <code>14400</code> <code>include_after</code> <code>bool</code> <p>When true, a sample that occurs after the requested time may be returned if it is the closest one.</p> <code>False</code> <code>reverse_geocode</code> <code>bool</code> <p>When true, Fulcra will attempt to reverse geocode the location and include the details in the results.</p> <code>False</code> <code>fulcra_userid</code> <code>Optional[str]</code> <p>When present, specifies the Fulcra user ID to request data for.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of dicts; the first dict is the best location sample.</p> <p>Examples:</p> <p>location = fulcra.location_at_time( ...     time = \"2024-01-24 00:00:00-08:00\", ... )</p> <p>location [{'speed': 0, 'horizontal_accuracy_meters': 4.848857421534995, 'longitude_degrees': -117.15709954484828, 'latitude_degrees': 32.707083bb994486, 'vertical_accuracy_meters': 3.2114044806616686, 'course_heading_accuracy_degrees': 180, 'course_heading_degrees': 87.05299950647989, 'ellipsoidal_altitude_meters': 32.700060645118356, 'floor': 0, 'speed_accuracy_meters': 0.9654413396512306, 'altitude_meters': 6.15396384336054, 'uuid': '59b2d63b-9b0b-436f-a66f-01129e1b33dd', 'timestamp': '2024-01-24T00:01:45.941+00:00', 'location_source': 'apple_location_update'}]</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.location_time_series","title":"<code>location_time_series(start_time, end_time, change_meters=None, sample_rate=900, look_back=14400, reverse_geocode=False, fulcra_userid=None)</code>","text":"<p>Retrieve a time series of locations that the user was at.  This uses the most precise underlying data sources available at the given time.</p> <p>Requires a valid access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Union[str, datetime]</code> <p>The start of the time range (inclusive), as an ISO 8601 string or <code>datetime</code> object</p> required <code>end_time</code> <code>Union[str, datetime]</code> <p>The end of the range (exclusive), as an ISO 8601 string or <code>datetime</code> object</p> required <code>change_meters</code> <code>Optional[float]</code> <p>when specified, subsequent samples that are fewer than this many meters away will not be included.</p> <code>None</code> <code>sample_rate</code> <code>int</code> <p>The length (in seconds) of each sample</p> <code>900</code> <code>look_back</code> <code>int</code> <p>The maximum number of seconds in the past to look back to find a value for a sample.</p> <code>14400</code> <code>reverse_geocode</code> <code>bool</code> <p>When true, Fulcra will attempt to reverse geocode the locations and include the details in the results.</p> <code>False</code> <code>fulcra_userid</code> <code>Optional[str]</code> <p>When present, specifies the Fulcra user ID to request data for.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of samples; each sample represents a location sample.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; locations = fulcra.location_time_series(\n...     start_time = \"2024-06-06T19:00:00-07:00\",\n...     end_time = \"2024-06-06T20:00:00-07:00\",\n...     reverse_geocode = True\n... )\n&gt;&gt;&gt; print(pd.DataFrame(locations))\n                                  slice_time        lat        long                           time  distance_change_m                                            address                                   location_details\n0  2024-06-07T02:00:00+00:00  32.706814 -117.156455   2024-06-07T01:50:10.92+00:00                NaN  Petco Park, 100 Park Boulevard, San Diego, CA ...  {'annotations': {'DMS': {'lat': '32\u00b0 42' 25.87...\n1  2024-06-07T02:15:00+00:00  32.706722 -117.156576  2024-06-07T02:03:56.903+00:00          15.281598  Petco Park, 100 Park Boulevard, San Diego, CA ...  {'annotations': {'DMS': {'lat': '32\u00b0 42' 25.87...\n2  2024-06-07T02:30:00+00:00  32.706699 -117.156583  2024-06-07T02:22:07.571+00:00           2.588992  Petco Park, 100 Park Boulevard, San Diego, CA ...  {'annotations': {'DMS': {'lat': '32\u00b0 42' 25.87...\n3  2024-06-07T02:45:00+00:00  32.706699 -117.156583  2024-06-07T02:22:07.571+00:00           0.000000  Petco Park, 100 Park Boulevard, San Diego, CA ...  {'annotations': {'DMS': {'lat': '32\u00b0 42' 25.87...\n</code></pre>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.metric_samples","title":"<code>metric_samples(start_time, end_time, metric, fulcra_userid=None)</code>","text":"<p>Retrieve the raw samples related to the given metric that occurred for the user during the specified period of time.</p> <p>In cases where samples cover ranges and not points in time, a sample will be returned if any part of its range intersects with the requested range.</p> <p>As an example, if you have <code>start_date</code> as 14:00 and <code>end_date</code> at 15:00, and there is a sample that covers 13:30-14:30, it will be included.</p> <p>Requires an authorized access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Union[str, datetime]</code> <p>The start of the time range (inclusive), as an ISO 8601 string or <code>datetime</code> object.</p> required <code>end_time</code> <code>Union[str, datetime]</code> <p>The end of the range (exclusive), as an ISO 8601 string or <code>datetime</code> object.</p> required <code>metric</code> <code>str</code> <p>The name of the metric to retrieve samples for.</p> required <code>fulcra_userid</code> <code>Optional[str]</code> <p>When present, specifies the Fulcra user ID to request data for.</p> <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; samples = fulcra.metric_samples(\n...     start_time=\"2023-08-09 07:00:00.000Z\",\n...     end_time=\"2023-08-10 07:00:00.000Z\",\n...     metric=\"StepCount\"\n... )\n\nTo inspect the first sample:\n\n&gt;&gt;&gt; samples[0]\n{'start_date': '2023-08-10T06:05:10.726+00:00', 'end_date':\n'2023-08-10T06:05:13.285+00:00', 'extras': None,\n'has_undetermined_duration': False, 'unit': 'count', 'count': 1,\n'uuid': '74983a94-8816-4b95-bbbd-d4108149261a', 'value': 8,\n'source_properties': {'name': 'b c\u2019s iPhone', 'version': '16.6',\n'productType': 'iPhone12,8', 'operatingSystemVersion': [16, 6, 0],\n'sourceBundleIdentifier':\n'com.apple.health.F8872676-6D45-4981-8E14-C009D0AE5F27'},\n'device_properties': {'name': 'iPhone', 'model':\n'iPhone', 'manufacturer': 'Apple Inc.',\n'hardwareVersion': 'iPhone12,8',\n'softwareVersion': '16.6'}}\n</code></pre>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.metric_time_series","title":"<code>metric_time_series(start_time, end_time, metric, sample_rate=60, replace_nulls=False, fulcra_userid=None, calculations=None)</code>","text":"<p>Retrieve time-series data from a single Fulcra metric, covering the time starting at <code>start_time</code> (inclusive) until <code>end_time</code> (exclusive).</p> <p>If specified, the <code>sample_rate</code> parameter defines the number of seconds per sample.  This value can be smaller than 1.  The default value is 60 (one sample per minute).</p> <p>Requires a valid access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Union[str, datetime]</code> <p>The start of the time range (inclusive), as an ISO 8601 string or <code>datetime</code> object</p> required <code>end_time</code> <code>Union[str, datetime]</code> <p>The end of the range (exclusive), as an ISO 8601 string or <code>datetime</code> object</p> required <code>metric</code> <code>str</code> <p>The name of the time-series metric to retrieve</p> required <code>sample_rate</code> <code>float</code> <p>The length (in seconds) of each sample</p> <code>60</code> <code>replace_nulls</code> <code>Optional[bool]</code> <p>When true, replace all NA/null/None values with 0</p> <code>False</code> <code>fulcra_userid</code> <code>Optional[str]</code> <p>When present, specifies the Fulcra user ID to request data for.</p> <code>None</code> <code>calculations</code> <code>Optional[list[str]]</code> <p>When present, specifies additional calculations to perform for each time slice.  The current values are: - <code>max</code>: The maximum value for each time window - <code>min</code>: The minimum value for each time window - <code>delta</code>: The delta between the maximum and minimum value for each time window - <code>mean</code>: The mean value for each time window - <code>uniques</code>: The list of unique values for each time window - <code>allpoints</code>: The list of all values for each time window - <code>rollingmean</code>: The rolling mean value for each time window.  This mean is calculated relative to the beginning of the requested sample</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>a pandas DataFrame containing the data.  For time ranges where data is missing, the values will be <code>&lt;NA&gt;</code>.</p> <p>Examples:</p> <p>To retrieve a dataframe containing the <code>StepCount</code> metric:</p> <pre><code>&gt;&gt;&gt; df = fulcra.metric_time_series(\n...     start_time = \"2024-01-24 00:00:00-08:00\",\n...     end_time = \"2024-01-25 00:00:00-08:00\",\n...     sample_rate = 1,\n...     metric = \"StepCount\"\n... )\n</code></pre> <p>The index of the DataFrame will be the time:</p> <p>df.index DatetimeIndex(['2024-01-24 08:00:00+00:00', '2024-01-24 08:00:01+00:00',                '2024-01-24 08:00:02+00:00', '2024-01-24 08:00:03+00:00',                '2024-01-24 08:00:04+00:00', '2024-01-24 08:00:05+00:00',                '2024-01-24 08:00:06+00:00', '2024-01-24 08:00:07+00:00',                '2024-01-24 08:00:08+00:00', '2024-01-24 08:00:09+00:00',                ...                '2024-01-25 07:59:50+00:00', '2024-01-25 07:59:51+00:00',                '2024-01-25 07:59:52+00:00', '2024-01-25 07:59:53+00:00',                '2024-01-25 07:59:54+00:00', '2024-01-25 07:59:55+00:00',                '2024-01-25 07:59:56+00:00', '2024-01-25 07:59:57+00:00',                '2024-01-25 07:59:58+00:00', '2024-01-25 07:59:59+00:00'],               dtype='datetime64[us, UTC]', name='time', length=86400, freq=None)</p> <p>The non-index column(s) in the dataframe will be related to the metric.</p> <p>df.columns Index(['step_count'], dtype='object')</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.metrics_catalog","title":"<code>metrics_catalog()</code>","text":"<pre><code>Gets the list of time-series metrics that are available for this user.\nThese metrics can be passed to the `metric_time_series` and\n`time_series_grouped` functions.\n\nReturns:\n    The metrics, including descriptions.\n\nExamples:\n\n        &gt;&gt;&gt; metrics = fulcra_client.metrics_catalog()\n        &gt;&gt;&gt; metrics[0]\n        {'name': 'AFibBurden', 'description': \"A discrete measure of the percentage of time that the user's heart shows signs\n</code></pre> <p>of atrial fibrillation (AFib) during a given monitoring period.\", 'unit': 'percent', 'is_time_series': True, 'metric_kind': 'discrete', 'value_column': 'afib_burden'}             &gt;&gt;&gt; metrics[1]             {'name': 'ActiveCaloriesBurned', 'description': 'A cumulative measure of the amount of active energy the user has burned.', 'unit': 'cal', 'is_time_series': True, 'metric_kind': 'cumulative', 'value_column': 'active_calories_burned'}</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.moment_annotations","title":"<code>moment_annotations(start_time, end_time, source=None, fulcra_userid=None)</code>","text":"<p>Retrieves recorded Moment Annotations, along with any metadata, for the requested time ranges.</p> <p>Requires a valid access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Union[str, datetime]</code> <p>The start of the time range (inclusive), as an ISO 8601 string or <code>datetime</code> object</p> required <code>end_time</code> <code>Union[str, datetime]</code> <p>The end of the range (exclusive), as an ISO 8601 string or <code>datetime</code> object</p> required <code>source</code> <code>Optional[str]</code> <p>When specified, the full identifier of the source to query records from</p> <code>None</code> <code>fulcra_userid</code> <code>Optional[str]</code> <p>When present, specifies the Fulcra user ID to request data for</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of recorded annotations; each annotation is represented by a dict.</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.numeric_annotations","title":"<code>numeric_annotations(start_time, end_time, source=None, fulcra_userid=None)</code>","text":"<p>Retrieves recorded Numeric Annotations, along with any metadata, for the requested time ranges.</p> <p>Requires a valid access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Union[str, datetime]</code> <p>The start of the time range (inclusive), as an ISO 8601 string or <code>datetime</code> object</p> required <code>end_time</code> <code>Union[str, datetime]</code> <p>The end of the range (exclusive), as an ISO 8601 string or <code>datetime</code> object</p> required <code>source</code> <code>Optional[str]</code> <p>When specified, the full identifier of the source to query records from</p> <code>None</code> <code>fulcra_userid</code> <code>Optional[str]</code> <p>When present, specifies the Fulcra user ID to request data for</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of recorded annotations; each annotation is represented by a dict.</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.refresh_access_token","title":"<code>refresh_access_token()</code>","text":"<p>Refreshes the access token using the stored refresh token.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the token was successfully refreshed, False otherwise.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If no refresh token is available.</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.scale_annotations","title":"<code>scale_annotations(start_time, end_time, source=None, fulcra_userid=None)</code>","text":"<p>Retrieves recorded Scale Annotations, along with any metadata, for the requested time ranges.</p> <p>Requires a valid access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Union[str, datetime]</code> <p>The start of the time range (inclusive), as an ISO 8601 string or <code>datetime</code> object</p> required <code>end_time</code> <code>Union[str, datetime]</code> <p>The end of the range (exclusive), as an ISO 8601 string or <code>datetime</code> object</p> required <code>source</code> <code>Optional[str]</code> <p>When specified, the full identifier of the source to query records from</p> <code>None</code> <code>fulcra_userid</code> <code>Optional[str]</code> <p>When present, specifies the Fulcra user ID to request data for</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of recorded annotations; each annotation is represented by a dict.</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.sleep_agg","title":"<code>sleep_agg(start_time, end_time, cycle_gap=None, stages=None, gap_stages=None, clip_to_range=True, mode='end', period='1d', agg_functions=None, tz='UTC', fulcra_userid=None)</code>","text":"<p>Return sleep cycles aggregated by a specified period.</p> <p>Processes raw sleep data samples into aggregated sleep stage durations per period.</p> <p>Requires a valid access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Union[str, datetime]</code> <p>The starting timestamp in ISO8601 format (inclusive).</p> required <code>end_time</code> <code>Union[str, datetime]</code> <p>The ending timestamp in ISO8601 format (exclusive).</p> required <code>cycle_gap</code> <code>Optional[str]</code> <p>Optional. Minimum time interval separating distinct cycles (e.g., \"PT2H\" for 2 hours).        Defaults to server-side default if not provided.</p> <code>None</code> <code>stages</code> <code>Optional[List[int]]</code> <p>Optional. Sleep stages to include. Defaults to all stages if not provided.</p> <code>None</code> <code>gap_stages</code> <code>Optional[List[int]]</code> <p>Optional. Sleep stages to consider as gaps in sleep cycles.         Defaults to server-side default if not provided.</p> <code>None</code> <code>clip_to_range</code> <code>Optional[bool]</code> <p>Optional. Whether to clip the data to the requested date range.            Defaults to True. This is always done when requesting data for            a user other than the authenticated user.</p> <code>True</code> <code>mode</code> <code>Optional[str]</code> <p>Optional. Whether to use the cycle start or cycle end to assign cycles to periods,   or to split sleep stage intervals at period boundaries. Defaults to \"end\".</p> <code>'end'</code> <code>period</code> <code>Optional[str]</code> <p>Optional. The period start and interval represented with the polars string language     (see https://docs.pola.rs/api/python/dev/reference/expressions/api/polars.Expr.dt.truncate.html).     Defaults to \"1d\".</p> <code>'1d'</code> <code>agg_functions</code> <code>Optional[List[str]]</code> <p>Optional. Aggregations to return. Defaults to [\"sum\"] if not provided.</p> <code>None</code> <code>tz</code> <code>Optional[str]</code> <p>Optional. IANA time zone to return results in. Defaults to \"UTC\".</p> <code>'UTC'</code> <code>fulcra_userid</code> <code>Optional[str]</code> <p>Optional. When present, specifies the Fulcra user ID to request data for.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame containing the aggregated sleep data.</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.sleep_cycles","title":"<code>sleep_cycles(start_time, end_time, cycle_gap=None, stages=None, gap_stages=None, clip_to_range=True, fulcra_userid=None)</code>","text":"<p>Return sleep cycles summarized from sleep stages.</p> <p>Processes raw sleep data samples into sleep cycles by finding gaps in the sleep sample data within a specified time interval.</p> <p>Requires a valid access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Union[str, datetime]</code> <p>The starting timestamp in ISO8601 format (inclusive).</p> required <code>end_time</code> <code>Union[str, datetime]</code> <p>The ending timestamp in ISO8601 format (exclusive).</p> required <code>cycle_gap</code> <code>Optional[str]</code> <p>Optional. Minimum time interval separating distinct cycles (e.g., \"PT2H\" for 2 hours).        Defaults to server-side default if not provided.</p> <code>None</code> <code>stages</code> <code>Optional[List[int]]</code> <p>Optional. Sleep stages to include. Defaults to all stages if not provided.</p> <code>None</code> <code>gap_stages</code> <code>Optional[List[int]]</code> <p>Optional. Sleep stages to consider as gaps in sleep cycles.         Defaults to server-side default if not provided.</p> <code>None</code> <code>clip_to_range</code> <code>Optional[bool]</code> <p>Optional. Whether to clip the data to the requested date range.            Defaults to True. This is always done when requesting data for            a user other than the authenticated user.</p> <code>True</code> <code>fulcra_userid</code> <code>Optional[str]</code> <p>Optional. When present, specifies the Fulcra user ID to request data for.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame containing the sleep cycle data.</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.sleep_stages","title":"<code>sleep_stages(start_time, end_time, cycle_gap=None, stages=None, gap_stages=None, merge_overlapping=True, merge_contiguous=True, clip_to_range=True, fulcra_userid=None)</code>","text":"<p>Return sleep stages derived from raw fulcra metric samples.</p> <p>Processes raw sleep data samples into non-conflicting sleep stages and assigns a cycle index by finding gaps in the sleep sample data within a specified time interval.</p> <p>If more than one sleep data source is present, sleep stage is determined based on the priority of the stage (in bed and unknown are deprioritized) and the start time of the sample (latest takes precedence).</p> <p>Requires a valid access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Union[str, datetime]</code> <p>The starting timestamp in ISO8601 format (inclusive).</p> required <code>end_time</code> <code>Union[str, datetime]</code> <p>The ending timestamp in ISO8601 format (exclusive).</p> required <code>cycle_gap</code> <code>Optional[str]</code> <p>Optional. Minimum time interval separating distinct cycles (e.g., \"PT2H\" for 2 hours).        Defaults to server-side default if not provided.</p> <code>None</code> <code>stages</code> <code>Optional[List[int]]</code> <p>Optional. Sleep stages to include. Defaults to all stages if not provided.</p> <code>None</code> <code>gap_stages</code> <code>Optional[List[int]]</code> <p>Optional. Sleep stages to consider as gaps in sleep cycles.         Defaults to server-side default if not provided.</p> <code>None</code> <code>merge_overlapping</code> <code>Optional[bool]</code> <p>Optional. Whether to merge overlapping stages based on priority and start time.                Defaults to True.</p> <code>True</code> <code>merge_contiguous</code> <code>Optional[bool]</code> <p>Optional. Whether to merge contiguous samples with the same sleep stage.               Defaults to True.</p> <code>True</code> <code>clip_to_range</code> <code>Optional[bool]</code> <p>Optional. Whether to clip the data to the requested date range.            Defaults to True. This is always done when requesting data for            a user other than the authenticated user.</p> <code>True</code> <code>fulcra_userid</code> <code>Optional[str]</code> <p>Optional. When present, specifies the Fulcra user ID to request data for.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame containing the sleep stage data.</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.time_series_grouped","title":"<code>time_series_grouped(start_time, end_time, metrics, sample_rate=60, replace_nulls=False, fulcra_userid=None)</code>","text":"<p>Retrieve a time-series data frame containing the specified set of Fulcra metrics from <code>start_time</code> (inclusive) until <code>end_time</code> (exclusive).</p> <p>If specified, the <code>sample_rate</code> parameter defines the number of seconds per sample.  This value can be smaller than 1.  The default value is 60 (one sample per minute).</p> <p>Requires a valid access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Union[str, datetime]</code> <p>The start of the time range (inclusive), as an ISO 8601 string or <code>datetime</code> object</p> required <code>end_time</code> <code>Union[str, datetime]</code> <p>The end of the range (exclusive), as an ISO 8601 string or <code>datetime</code> object</p> required <code>metrics</code> <code>List[str]</code> <p>The names of the time-series metrics to include in the result</p> required <code>sample_rate</code> <code>float</code> <p>The length (in seconds) of each sample</p> <code>60</code> <code>replace_nulls</code> <code>Optional[bool]</code> <p>When true, replace all NA/null/None values with 0</p> <code>False</code> <code>fulcra_userid</code> <code>Optional[str]</code> <p>When present, specifies the Fulcra user ID to request data for.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>a pandas DataFrame containing the data.  For time ranges where data is missing, the values will be <code>&lt;NA&gt;</code>.</p> <p>Examples:</p> <p>To retrieve a dataframe containing four different metrics (<code>DistanceTraveledOnFoot</code>, <code>AppleWatchExerciseTime</code>, <code>ActiveCaloriesBurned</code>, and <code>BasalCaloriesBurned</code>):</p> <pre><code>&gt;&gt;&gt; df = fulcra.time_series_grouped(\n...     start_time = \"2023-07-01 04:00:00.000Z\",\n...     end_time = \"2023-07-10 04:00:00.000Z\",\n...     metrics=[\"DistanceTraveledOnFoot\",\n...         \"AppleWatchExerciseTime\",\n...         \"ActiveCaloriesBurned\",\n...         \"BasalCaloriesBurned\"\n...     ]\n... )\n</code></pre> <p>The index of the DataFrame will be the time:</p> <pre><code>&gt;&gt;&gt; df.index\nDatetimeIndex(['2023-07-01 04:00:00+00:00',\n               '2023-07-01 04:01:00+00:00',\n               '2023-07-01 04:02:00+00:00',\n               '2023-07-01 04:03:00+00:00',\n               '2023-07-01 04:04:00+00:00',\n               '2023-07-01 04:05:00+00:00',\n               '2023-07-01 04:06:00+00:00',\n               '2023-07-01 04:07:00+00:00',\n               '2023-07-01 04:08:00+00:00',\n               '2023-07-01 04:09:00+00:00',\n               ...\n               '2023-07-10 03:50:00+00:00',\n               '2023-07-10 03:51:00+00:00',\n               '2023-07-10 03:52:00+00:00',\n               '2023-07-10 03:53:00+00:00',\n               '2023-07-10 03:54:00+00:00',\n               '2023-07-10 03:55:00+00:00',\n               '2023-07-10 03:56:00+00:00',\n               '2023-07-10 03:57:00+00:00',\n               '2023-07-10 03:58:00+00:00',\n            '2023-07-10 03:59:00+00:00'],\n              dtype='datetime64[ns, UTC]', name='time', length=12960,\n                freq=None)\n</code></pre> <p>Each metric requested will add at least one column to the dataframe:</p> <pre><code>&gt;&gt;&gt; df.columns\nIndex(['distance_on_foot', 'apple_watch_exercise_time',\n       'active_calories_burned', 'basal_calories_burned'],\n        dtype='object')\n</code></pre>"}]}