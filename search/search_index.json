{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>fulcra-api</code>: A Fulcra API client library for Python","text":"<p>The fulcra-api library is currently compatible with Python 3.9 and up.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#installing-in-your-project","title":"Installing in your project","text":"<p>First, install the <code>fulcra-api</code> module in your project.</p> <p>If you're using Poetry, use:</p> <pre><code>poetry add fulcra-api\n</code></pre> <p>If you're using pip, use:</p> <pre><code>pip install fulcra-api\n</code></pre>"},{"location":"#installing-in-a-jupyter-notebook","title":"Installing in a Jupyter notebook","text":"<p>In a Python cell in your notebook, use:</p> <pre><code>%pip install fulcra-api\n</code></pre> <p>Colaboratory note: You may see a dependency error while installing pyarrow; this can be ignored.</p>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#logging-in","title":"Logging In","text":"<p>Most Fulcra API requests are authenticated with a token, which must be passed along  with each request.  The Fulcra API uses Auth0's  Device Authorization Flow to authorize the code running and get a token.</p> <p>This library simplifies this flow for you; to log in, create an instance of the <code>FulcraAPI</code> class and call <code>authorize</code> on it:</p> <pre><code>from fulcra_api.core import FulcraAPI\nfulcra = FulcraAPI()\nfulcra.authorize()\n</code></pre> <p>As part of this flow, you'll be asked to visit a webpage to authenticate to Fulcra. The URL of this page will be included in the output; the library will also attempt to open a new tab to the URL automatically.</p> <p>As a user, just click \"Confirm\" once you've logged in; once this succeeds, close the tab.</p> <p>When this succeeds, the call to <code>authorize()</code> will return, and the <code>fulcra</code> object will now make calls.  It will take care of refreshing the token and including it with API calls.</p>"},{"location":"#making-api-calls","title":"Making API Calls","text":"<p>Once you've called <code>authorize</code> once, any of the calls in the FulcraAPI class will work.  Here's an example that will retrieve the calendars from your data store:</p> <pre><code>calendars = fulcra.calendars()\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>You can find some demo notebooks in the Fulcra demos repository.</p>"},{"location":"#bugs-feature-requests","title":"Bugs / Feature Requests","text":"<p>Feel free to report any bugs or feature requests using GitHub issues.</p>"},{"location":"fulcraapi/","title":"The FulcraAPI class","text":"<p>The main class for making Fulcra API functions.</p> <p>This contains functions for authorizing a token, authenticating HTTP requests, making calls, and loading data.</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.apple_location_updates","title":"<code>apple_location_updates(start_time, end_time)</code>","text":"<p>Retrieve the raw Apple location update samples during the specified period of time.</p> <p>Requires an authorized access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>str</code> <p>The start of the time range (inclusive), as an ISO 8601 string.</p> required <code>end_time</code> <code>str</code> <p>The end of the range (exclusive), as an ISO 8601 string.</p> required <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of dicts, each of which contains the data from a location update.</p> <p>Examples:</p> <p>To retrieve all location updates within a specific hour:</p> <pre><code>&gt;&gt;&gt; updates = fulcra.apple_location_updates(\n...     start_time=\"2023-09-24T20:00:00Z\",\n...     end_time=\"2023-09-24T21:10:00Z\"\n... )\n</code></pre> <p>To see the details of the first update:</p> <pre><code>&gt;&gt;&gt; updates[0]\n{'speed': -1, 'horizontal_accuracy_meters': 35, 'longitude_degrees':\n-117.15661336566698, 'source_is_simulated_by_software': False,\n'source_is_produced_by_accessory': False, 'latitude_degrees':\n32.706505158026005, 'vertical_accuracy_meters': 3.0130748748779297,\n'course_heading_accuracy_degrees': -1, 'course_heading_degrees': -1,\n'ellipsoidal_altitude_meters': -6.280021667480469, 'floor': 0,\n'speed_accuracy_meters': -1, 'altitude_meters': 29.17388153076172, 'uuid':\n'e80feacc-54e9-414f-86cb-8d6ebd85ea41', 'timestamp':\n'2023-09-24T20:39:28.056+00:00'}\n</code></pre>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.apple_location_visits","title":"<code>apple_location_visits(start_time, end_time)</code>","text":"<p>Retrieve the raw Apple location visit samples during the specified period of time.</p> <p>Requires an authorized access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>str</code> <p>The start of the time range (inclusive), as an ISO 8601 string.</p> required <code>end_time</code> <code>str</code> <p>The end of the range (exclusive), as an ISO 8601 string.</p> required <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of dicts, each of which contains the data from a location visit.</p> <p>Examples:</p> <p>To retrieve all location updates within a specific hour:</p> <pre><code>&gt;&gt;&gt; visits = fulcra.apple_location_visits(\n...     start_time=\"2023-09-24T20:00:00Z\",\n...     end_time=\"2023-09-24T21:10:00Z\"\n... )\n</code></pre> <p>To see the details of the first update:</p> <pre><code>&gt;&gt;&gt; visits[0]\n{'longitude_degrees': -117.1224047932943, 'latitude_degrees':\n32.75812770726706, 'arrival_date': '0001-01-01T00:00:00+00:00',\n'departure_date': '2023-09-25T01:42:16.998+00:00',\n'horizontal_accuracy_meters': 32.93262639589646, 'uuid':\n    '935971dd-0822-49ef-a74f-b09a24d68c3a'}\n</code></pre>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.apple_workouts","title":"<code>apple_workouts(start_time, end_time)</code>","text":"<p>Retrieve the list of Apple workouts that occurred (at least partially) during the specified time range.</p> <p>Requires an authorized access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>str</code> <p>The start of the time range (inclusive), as an ISO 8601 string.</p> required <code>end_time</code> <code>str</code> <p>The end of the range (exclusive), as an ISO 8601 string.</p> required <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of dicts, each of which contains the data from a workout.</p> <p>Examples:</p> <p>To retrieve all workouts during a time period:</p> <pre><code>&gt;&gt;&gt; workouts = fulcra.apple_workouts(\n...     start_time = \"2023-09-21 07:00:00.000Z\",\n...     end_time = \"2023-09-22 07:00:00.000Z\"\n... )\n</code></pre> <p>To inspect the details of a workout:</p> <pre><code>&gt;&gt;&gt; workouts[0]\n{'start_date': '2023-09-21T19:18:31.733000Z', 'end_date':\n'2023-09-21T19:49:08.773000Z', 'has_undetermined_duration': False,\n'apple_workout_id': '480b25fe-b229-41b9-bf13-7ccf5e2092ec', 'duration':\n1837.0397539138794, 'extras': {'HKTimeZone': 'America/Los_Angeles',\n'HKAverageMETs': '4.37848 kcal/hr\u00b7kg' ... }\n</code></pre>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.authorize","title":"<code>authorize()</code>","text":"<p>Request a device token, then prompt the user to authorize it.</p> <p>This uses the Device Authorization workflow, which requires the user to visit a link and confirm that the code shown on the screen matches.</p> <p>This function will attempt to open the link in a new browwser tab (using <code>webbrowser</code> module); it will also be either <code>print()</code>ed out (or <code>display()</code>ed out if run inside Jupyter).</p> <p>The function will wait until the user visits the page and authentiactes, or until a specified time has passed.</p> <p>Raises an exception on failure.</p> <p>Examples:</p> <p>fulcra.authorize() Use your browser to log in to Fulcra.  If the tab does not open automatically, visit this URL to authenticate: https://fulcra.us.auth0.com/activate?user_code=SJZC-GRBW</p> <p>When the authorization succeeds, the following will be displayed:</p> <pre><code>Authorization succeeded.\n</code></pre>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.calendar_events","title":"<code>calendar_events(start_time, end_time, calendar_ids=None)</code>","text":"<p>Retrieve the list of calendar events that occur (at least partially) during the specified time range.</p> <p>Requires an authorized access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>str</code> <p>The start of the time range (inclusive), as an ISO 8601 string.</p> required <code>end_time</code> <code>str</code> <p>The end of the range (exclusive), as an ISO 8601 string.</p> required <code>calendar_ids</code> <code>Optional[List[str]]</code> <p>If included, the query results are limited to events that are on the specified calendars.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of dicts, each of which contains the data from a calendar event.</p> <p>Examples:</p> <p>To retrieve all calendar events that span a given range of time:</p> <pre><code>&gt;&gt;&gt; cal_events = fulcra.calendar_events(\n...     start_time = \"2023-09-24 07:00:00.000Z\",\n...     end_time = \"2023-09-25 07:00:00.000Z\",\n...     calendar_ids=[\"01fb4138-db27-4792-867d-5cfbdc720165\"]\n... )\n</code></pre> <p>To inspect the details of an event:</p> <pre><code>&gt;&gt;&gt; cal_events[0]\n{'calendar_event_id': 'c409a249-24cd-4c19-b763-3683cc21b9f8',\n'calendar_id': '01fb4138-db27-4792-867d-5cfbdc720165', 'start_date':\n'2023-09-24T20:10:00Z', 'end_date': '2023-09-24T21:10:00Z',\n'allow_new_time_proposals': None, 'alarms':\n['19b7692e-7434-44be-a5ba-c8dfa338deb6'], 'availability': 'free',\n'calendar_item_external_identifier':\n'7kukuqrfedlm2f9tfbe684r6cqpk9mrk0aqdeoan7jdbr93e7963lagn9uq6pdsbac40',\n'calendar_item_identifier': '22153B27-4BEE-480C-9627-F2EABC698103',\n'event_identifier':\n'EC9D6240-04A7-4869-9D2E-1A7648EA7732:7kukuqrfedlm2f9tfbe684r6cqpk9mrk0aqdeoan7jdbr93e7963lagn9uq6pdsbac40',\n'creation_date': '2023-09-16T23:27:22Z', 'has_alarms': True,\n'has_attendees': True, 'has_notes': True, 'has_recurrence_rules':\nFalse, 'is_all_day': False, 'is_detached': False, 'last_modified_date':\n'2023-09-16T23:27:26Z', 'location': 'PETCO Park', 'notes':\n'This event was created from an email you received in Gmail.',\n'occurrence_date': '2023-09-24T20:10:00Z', 'organizer':\n'22381502-0af3-487a-820c-e22aa4cae201', 'recurrence_rules': None,\n'status': 'confirmed', 'geolocation': None, 'time_zone':\n'America/Los_Angeles (fixed)', 'title':\n'St. Louis Cardinals at San Diego Padres', 'url': None,\n'extras': {}, 'participants': [{'is_current_user': True,\n'participant_role': 'required', 'participant_type': 'person',\n'participant_status': 'accepted', 'url': 'mailto:cstone@gmail.com',\n'contact_id': '00900185-b290-4f1c-860d-e4433024a943',\n'name': 'cstone@gmail.com'}]}\n</code></pre>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.calendars","title":"<code>calendars()</code>","text":"<p>Retrieve the list of calendars available in your data store.</p> <p>Requires an authorized access token.</p> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of dicts, each of which represents a calendar.</p> <p>Examples:</p> <p>To retrieve all calendars from your data store:</p> <pre><code>&gt;&gt;&gt; calendars = fulcra.calendars()\n&gt;&gt;&gt;\n</code></pre> <p>To inspect the details of a calendar:</p> <pre><code>&gt;&gt;&gt; calendars[0]\n{'calendar_id': '02b761da-46d0-4074-a9c8-406fd0de3adf', 'calendar_name':\n'Birthdays', 'calendar_color':\n'[0.5098039507865906,0.5843137502670288,0.686274528503418,1.0]',\n'calendar_source_id': '03da9f61-7b58-4021-8f40-a93548258faf',\n'calendar_source_name': 'Other', 'fulcra_source': 'apple_calendar'}\n</code></pre>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.fulcra_api","title":"<code>fulcra_api(access_token, url_path)</code>","text":"<p>Make a call to the given url path (e.g. <code>/v0/data/time_series_grouped?...</code>) with the specified access token.</p> <p>Parameters:</p> Name Type Description Default <code>access_token</code> <code>str</code> <p>The access token to authenticate the request with</p> required <code>url_path</code> <code>str</code> <p>The path of the URL to use (e.g. <code>\"/v0/data/...\"</code>)</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The raw response data (as bytes).  Raises an exception on failure.</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.get_fulcra_userid","title":"<code>get_fulcra_userid()</code>","text":"<p>Retrieve the currently authorized Fulcra UserID.</p> <p>Returns:</p> Type Description <code>str</code> <p>the Fulcra UserID of the currently-authorized user.</p>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.metric_samples","title":"<code>metric_samples(start_time, end_time, metric)</code>","text":"<p>Retrieve the raw samples related to the given metric that occurred for the user during the specified period of time.</p> <p>In cases where samples cover ranges and not points in time, a sample will be returned if any part of its range intersects with the requested range.</p> <p>As an example, if you have <code>start_date</code> as 14:00 and <code>end_date</code> at 15:00, and there is a sample that covers 13:30-14:30, it will be included.</p> <p>Requires an authorized access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>str</code> <p>The start of the time range (inclusive), as an ISO 8601 string.</p> required <code>end_time</code> <code>str</code> <p>The end of the range (exclusive), as an ISO 8601 string.</p> required <code>metric</code> <code>str</code> <p>The name of the metric to retrieve samples for.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; samples = fulcra.metric_samples(\n...     start_time=\"2023-08-09 07:00:00.000Z\",\n...     end_time=\"2023-08-10 07:00:00.000Z\",\n...     metric=\"StepCount\"\n... )\n\nTo inspect the first sample:\n\n&gt;&gt;&gt; samples[0]\n{'start_date': '2023-08-10T06:05:10.726+00:00', 'end_date':\n'2023-08-10T06:05:13.285+00:00', 'extras': None,\n'has_undetermined_duration': False, 'unit': 'count', 'count': 1,\n'uuid': '74983a94-8816-4b95-bbbd-d4108149261a', 'value': 8,\n'source_properties': {'name': 'b c\u2019s iPhone', 'version': '16.6',\n'productType': 'iPhone12,8', 'operatingSystemVersion': [16, 6, 0],\n'sourceBundleIdentifier':\n'com.apple.health.F8872676-6D45-4981-8E14-C009D0AE5F27'},\n'device_properties': {'name': 'iPhone', 'model':\n'iPhone', 'manufacturer': 'Apple Inc.',\n'hardwareVersion': 'iPhone12,8',\n'softwareVersion': '16.6'}}\n</code></pre>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.simple_events","title":"<code>simple_events(start_time, end_time, categories=None)</code>","text":"<p>Retrieve the events that occurred during the specified period of time, optionally filtering by categories.</p> <p>If included, the <code>categories</code> parameter only includes events from the specified categories.</p> <p>Requires an authorized access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>str</code> <p>The start of the time range (inclusive), as an ISO 8601 string.</p> required <code>end_time</code> <code>str</code> <p>The end of the range (exclusive), as an ISO 8601 string.</p> required <code>categories</code> <code>Optional[List[str]]</code> <p>When present, the categories to filter on.  Only events matching these categories will be returned.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of dicts, each of which represents an event.</p> <p>Examples:</p> <p>To retrieve the stored events during a given range:</p> <pre><code>&gt;&gt;&gt; simple_events = fulcra.simple_events(\n...     start_time=\"2022-05-01 04:00:00.000Z\",\n...     end_time=\"2023-08-03 04:00:00.000Z\"\n... )\n</code></pre> <p>To get the details of an event:</p> <pre><code>&gt;&gt;&gt; simple_events[0]\n{'event_body': 'relieved', 'category': 'mood', 'event_id':\n'12680011-6668-4c8e-b4cd-3ca429445ac0', 'timestamp':\n'2022-09-21T05:51:22Z'}\n</code></pre>"},{"location":"fulcraapi/#fulcra_api.core.FulcraAPI.time_series_grouped","title":"<code>time_series_grouped(start_time, end_time, metrics, sample_rate=60, replace_nulls=False)</code>","text":"<p>Retrieve a time-series data frame containing the specified set of Fulcra metrics from <code>start_time</code> (inclusive) until <code>end_time</code> (exclusive).</p> <p>If specified, the <code>sample_rate</code> parameter defines the number of seconds per sample.  This value can be smaller than 1.  The default value is 60 (one sample per minute).</p> <p>Requires a valid access token.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>str</code> <p>The start of the time range (inclusive), as an ISO 8601 string</p> required <code>end_time</code> <code>str</code> <p>The end of the range (exclusive), as an ISO 8601 string</p> required <code>metrics</code> <code>List[str]</code> <p>The names of the time-series metrics to include in the result</p> required <code>sample_rate</code> <code>float</code> <p>The length (in seconds) of each sample</p> <code>60</code> <code>replace_nulls</code> <code>Optional[bool]</code> <p>When true, replace all NA/null/None values with 0.</p> <code>False</code> <p>Returns:</p> Type Description <p>a pandas DataFrame containing the data.  For time ranges where data is missing, the values will be <code>&lt;NA&gt;</code>.</p> <p>Examples:</p> <p>To retrieve a dataframe containing four different metrics (<code>DistanceTraveledOnFoot</code>, <code>AppleWatchExerciseTime</code>, <code>ActiveCaloriesBurned</code>, and <code>BasalCaloriesBurned</code>):</p> <pre><code>&gt;&gt;&gt; df = fulcra.time_series_grouped(\n...     start_time = \"2023-07-01 04:00:00.000Z\",\n...     end_time = \"2023-07-10 04:00:00.000Z\",\n...     metrics=[\"DistanceTraveledOnFoot\",\n...         \"AppleWatchExerciseTime\",\n...         \"ActiveCaloriesBurned\",\n...         \"BasalCaloriesBurned\"\n...     ]\n... )\n</code></pre> <p>The index of the DataFrame will be the time:</p> <pre><code>&gt;&gt;&gt; df.index\nDatetimeIndex(['2023-07-01 04:00:00+00:00',\n               '2023-07-01 04:01:00+00:00',\n               '2023-07-01 04:02:00+00:00',\n               '2023-07-01 04:03:00+00:00',\n               '2023-07-01 04:04:00+00:00',\n               '2023-07-01 04:05:00+00:00',\n               '2023-07-01 04:06:00+00:00',\n               '2023-07-01 04:07:00+00:00',\n               '2023-07-01 04:08:00+00:00',\n               '2023-07-01 04:09:00+00:00',\n               ...\n               '2023-07-10 03:50:00+00:00',\n               '2023-07-10 03:51:00+00:00',\n               '2023-07-10 03:52:00+00:00',\n               '2023-07-10 03:53:00+00:00',\n               '2023-07-10 03:54:00+00:00',\n               '2023-07-10 03:55:00+00:00',\n               '2023-07-10 03:56:00+00:00',\n               '2023-07-10 03:57:00+00:00',\n               '2023-07-10 03:58:00+00:00',\n            '2023-07-10 03:59:00+00:00'],\n              dtype='datetime64[ns, UTC]', name='time', length=12960,\n                freq=None)\n</code></pre> <p>Each metric requested will add at least one column to the dataframe:</p> <pre><code>&gt;&gt;&gt; df.columns\nIndex(['distance_on_foot', 'apple_watch_exercise_time',\n       'active_calories_burned', 'basal_calories_burned'],\n        dtype='object')\n</code></pre>"}]}